# -*- coding: utf-8 -*-
"""DT  & BT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a2vAAag9IiEpwc7ei7ICcc44Kmfr8pdv
"""

#load libraries
import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_graphviz,plot_tree
from IPython.display import Image

df=pd.read_csv("/content/drive/MyDrive/demoDT1.csv")
print(df)

feature_cols =['Literacy',' Cleanliness',' Crime_Rate']
feature=df[feature_cols]
Target=df.Good

#create decision tree classifer object
DT=DecisionTreeClassifier()
#train decision tree classifer
DT=DT.fit(feature,Target)

#predict the response for test dataset
l=int(input("enter literacy:"))
c1=int(input("enter cleanliness:"))
cr=int(input("enter crimerate:"))
pred=DT.predict([[l,c1,cr]])
if pred==1:
  print("GOOD STATE")
else:
  print("BAD STATE")

plot_tree(DT)

#load libraries
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier

df=pd.read_csv("/content/drive/MyDrive/demoDT1.csv")

feature_cols=['Literacy',' Cleanliness',' Crime_Rate']
feature=df[feature_cols]
Target=df.Good#target variable

RF=RandomForestClassifier(n_estimators=10)
RF.fit(feature,Target)

#predict the resopnse for test dataset
l=int(input("tber literacy:"))
cl=int(input("enter cleanliness:"))
cr=int(input("enter crimerate:"))

#saving all decision trees
import os
output_dir="tree_visualizations"
os.makedirs(output_dir,exist_ok=True)



RF.estimators_ #model name=RF