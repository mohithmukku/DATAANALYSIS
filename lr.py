# -*- coding: utf-8 -*-
"""LR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ireLU7Pe-KJIzwKurxi_4hD0Ilr-feEY
"""

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
t=([[5],[7],[12],[16],[20]])
m=[70,100,140,205,230]
lr.fit(t,m)
lr.predict([[5.5]])

import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

t=np.array([5,7,12,16,20]).reshape(-1,1)
m=np.array([40,120,180,210,240])

lr=LinearRegression()#create a linera regrssion
lr.fit(t,m)

#plot the data
plt.scatter(t,m,color='black')
#plot linear regression kline
y_pred=lr.predict(t)#t=5,7,12,16,20
print(y_pred)
plt.plot(t,y_pred,color='blue',linewidth=3,marker="H")
plt.xlabel('Time')
plt.ylabel('Mass')
plt.title('Linear Regression')
plt.show()

from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
LR=LinearRegression()
t=[[5],[7],[12],[16],[20]]
m=[40,120,180,210,240]
LR.fit(t,m)
LR.predict([[5.5]])
plt.scatter(t,m,color='black')
y_pred = LR.predict([[5.5]])
print(y_pred)
plt.plot(5.5,y_pred,5.5,color='blue',linewidth=3,marker="H")
plt.xlabel('Time')
plt.ylabel('Mass')
plt.title('LinearRegression')
plt.show()

import numpy as np
from sklearn.linear_model import LogisticRegression
#distance and corresponding probability data
distances=np.array([1,2,5,10,15,20,21,22,23,24,25,26,27,28,29,30,35,40,41,47,50]).reshape(-1,1)
probabilities=np.array([1,1,1,1,1,1,0.9,0.85,0.73,0.67,0.5,0.47,0.39,0.31,0.25,0.15,0,0,0,0,0])
#convert probabilities to binary labels

threshold=0
binary_labels=(probabilities>threshold)
#create and fit logistic regression model
logr=LogisticRegression()
logr.fit(distances, binary_labels)

p=logr.predict([[25]])
print(p)

if p==[True]:
  print("Goal")
else:
  print("no goal")

#predict 100 distances between 1 and 50
#Genetate distances for prediction
dist=np.linspace(1,50,100).reshape(-1,1)
print(dist)#diatances

#make predictions using the model
prob=logr.predict_proba(dist)#probailities -predict:
print(prob)

#plotting actual data - train
import matplotlib.pyplot as plt
plt.scatter(distances, binary_labels, color='black',label='Data')
#platting test data with predictions - valid/test
plt.plot(dist,prob,color='blue',label='LogisticRegression')
plt.title('Distance vs Probability of Scoring a Goal')
plt.xlabel("Distance")
plt.ylabel('Probability')
plt.legend()
plt.grid(True)
plt.show()

import pandas as pd
df = pd.read_csv("/content/drive/MyDrive/demoDT1.csv")
print(df)

import numpy as np
#load variables as array!
cr=np.array(df[' Crime_Rate']).reshape(-1,1)
y=np.array(df['Good'])

#create the model
from sklearn.linear_model import LogisticRegression
model=LogisticRegression()

model.fit(cr,y)

c=int(input("enter crime rate in uour city:"))
pred= model.predict([[c]])#crime rate
if pred==1:
  print("good city")
else:
  print("bad city")