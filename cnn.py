# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aYE3GsuZVMHd2_bbvpA7c_AH24pyrGDc
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
# define image size and batch size
IMG_SIZE=224
BATCH_SIZE=32

train_datagen=ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)
train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Brain_Tumor_Detection/Brain_Tumor_Detection/train',
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training'
)
val_generator=train_datagen.flow_from_directory(
   '/content/drive/MyDrive/Brain_Tumor_Detection/Brain_Tumor_Detection/train' ,
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation'
)
test_datagen=ImageDataGenerator(rescale=1./255)
test_generator=test_datagen.flow_from_directory('/content/drive/MyDrive/Brain_Tumor_Detection/Brain_Tumor_Detection/test'
    ,
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
)

# Define the model
model = keras.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

#compile the model
model.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])

history=model.fit(train_generator,validation_data=val_generator,epochs=5)

model.save('model.h5','lable.TX ')

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
# Load and saved model
model = load_model('/content/model.h5')
test_image_path = '/content/no6.jpg'
img = image.load_img(test_image_path, target_size=(224,224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array /= 255.
predication = model.predict(img_array)
if predication<0.5:
  print("prediction: No tumor (Probability", predication[0][0],")")
else:
  print("prediction:  tumor (Probability", predication[0][0],")")